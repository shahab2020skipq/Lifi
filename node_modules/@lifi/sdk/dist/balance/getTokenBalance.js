import utils from './utils';
export const getTokenBalance = async (walletAddress, token) => {
    const tokenAmounts = await getTokenBalances(walletAddress, [token]);
    return tokenAmounts.length ? tokenAmounts[0] : null;
};
export const getTokenBalances = async (walletAddress, tokens) => {
    // split by chain
    const tokensByChain = {};
    tokens.forEach((token) => {
        if (!tokensByChain[token.chainId]) {
            tokensByChain[token.chainId] = [];
        }
        tokensByChain[token.chainId].push(token);
    });
    const tokenAmountsByChain = await getTokenBalancesForChains(walletAddress, tokensByChain);
    return Object.values(tokenAmountsByChain).flat();
};
export const getTokenBalancesForChains = async (walletAddress, tokensByChain) => {
    const tokenAmountsByChain = {};
    const promises = Object.keys(tokensByChain).map(async (chainIdStr) => {
        const chainId = parseInt(chainIdStr);
        const tokenAmounts = await utils.getBalances(walletAddress, tokensByChain[chainId]);
        tokenAmountsByChain[chainId] = tokenAmounts;
    });
    await Promise.allSettled(promises);
    return tokenAmountsByChain;
};
