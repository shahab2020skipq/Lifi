import BigNumber from 'bignumber.js';
import { Contract } from 'ethers';
import ChainsService from '../services/ChainsService';
import { ERC20_ABI } from '../types';
import { ServerError } from '../utils/errors';
import { fetchDataUsingMulticall } from '../utils/multicall';
export const getApproved = async (signer, tokenAddress, contractAddress, transactionRequest) => {
    const signerAddress = await signer.getAddress();
    const erc20 = new Contract(tokenAddress, ERC20_ABI, signer);
    try {
        const approved = await erc20.allowance(signerAddress, contractAddress, {
            gasLimit: transactionRequest?.gasLimit,
            gasPrice: transactionRequest?.gasPrice,
            maxFeePerGas: transactionRequest?.maxFeePerGas,
            maxPriorityFeePerGas: transactionRequest?.maxPriorityFeePerGas,
        });
        return new BigNumber(approved.toString());
    }
    catch (e) {
        return new BigNumber(0);
    }
};
export const setApproval = (signer, tokenAddress, contractAddress, amount) => {
    const erc20 = new Contract(tokenAddress, ERC20_ABI, signer);
    return erc20.approve(contractAddress, amount);
};
export const getAllowanceViaMulticall = async (signer, chainId, tokenData) => {
    const chainsService = ChainsService.getInstance();
    const chain = await chainsService.getChainById(chainId);
    if (!chain.multicallAddress) {
        throw new ServerError(`No multicall address configured for chainId ${chainId}.`);
    }
    const ownerAddress = await signer.getAddress();
    const calls = [];
    tokenData.map(({ token, approvalAddress }) => {
        calls.push({
            address: token.address,
            name: 'allowance',
            params: [ownerAddress, approvalAddress],
        });
    });
    const result = await fetchDataUsingMulticall(calls, ERC20_ABI, chainId, chain.multicallAddress);
    if (!result.length) {
        throw new ServerError(`Couldn't load allowance from chainId ${chainId} using multicall.`);
    }
    const parsedResult = result.map(({ data }) => ({
        approvalAmount: data ?? new BigNumber(0),
    }));
    return tokenData.map(({ token, approvalAddress }, i) => ({
        token,
        approvalAddress,
        approvedAmount: parsedResult[i].approvalAmount,
    }));
};
export const groupByChain = (tokenDataList) => {
    // group by chain
    const tokenDataByChain = {};
    tokenDataList.forEach((tokenData) => {
        if (!tokenDataByChain[tokenData.token.chainId]) {
            tokenDataByChain[tokenData.token.chainId] = [];
        }
        tokenDataByChain[tokenData.token.chainId].push(tokenData);
    });
    return tokenDataByChain;
};
