import ConfigService from './services/ConfigService';
import { HTTPError } from './utils/errors';
import { sleep } from './utils/utils';
import { version } from './version';
export const requestSettings = {
    retries: 1,
};
export const request = async (url, options = {
    retries: requestSettings.retries,
}) => {
    const { userId, integrator, widgetVersion } = ConfigService.getInstance().getConfig();
    options.retries = options.retries ?? requestSettings.retries;
    try {
        if (!options.skipTrackingHeaders) {
            if (userId) {
                options.headers = {
                    ...options?.headers,
                    'X-LIFI-UserId': userId,
                };
            }
            if (widgetVersion) {
                options.headers = {
                    ...options?.headers,
                    'X-LIFI-Widget': widgetVersion,
                };
            }
            if (version) {
                options.headers = {
                    ...options?.headers,
                    'X-LIFI-SDK': version,
                };
            }
            // integrator is mandatory during SDK initialization
            options.headers = {
                ...options?.headers,
                'X-LIFI-Integrator': integrator,
            };
        }
        const response = await fetch(url, options);
        if (!response.ok) {
            throw new HTTPError(response);
        }
        const data = await response.json();
        return data;
    }
    catch (error) {
        if (options.retries > 0 && error?.status === 500) {
            await sleep(500);
            return request(url, { ...options, retries: options.retries - 1 });
        }
        throw error;
    }
};
