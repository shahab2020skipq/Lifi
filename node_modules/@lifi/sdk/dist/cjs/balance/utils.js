"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBalances = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ethers_1 = require("ethers");
const connectors_1 = require("../connectors");
const multicall_1 = require("../utils/multicall");
const utils_1 = require("../utils/utils");
const balanceAbi = [
    {
        constant: true,
        inputs: [{ name: 'who', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: true,
        inputs: [{ name: 'addr', type: 'address' }],
        name: 'getEthBalance',
        outputs: [{ name: 'balance', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
];
const getBalances = async (walletAddress, tokens) => {
    if (tokens.length === 0) {
        return [];
    }
    const { chainId } = tokens[0];
    tokens.forEach((token) => {
        if (token.chainId !== chainId) {
            // eslint-disable-next-line no-console
            console.warn(`Requested tokens have to be on the same chain.`);
            return [];
        }
    });
    if ((await (0, connectors_1.getMulticallAddress)(chainId)) && tokens.length > 1) {
        return getBalancesFromProviderUsingMulticall(walletAddress, tokens);
    }
    else {
        return getBalancesFromProvider(walletAddress, tokens);
    }
};
exports.getBalances = getBalances;
const getBalancesFromProviderUsingMulticall = async (walletAddress, tokens) => {
    // Configuration
    const { chainId } = tokens[0];
    const multicallAddress = await (0, connectors_1.getMulticallAddress)(chainId);
    if (!multicallAddress) {
        throw new Error('No multicallAddress found for the given chain.');
    }
    return executeMulticall(walletAddress, tokens, multicallAddress, chainId);
};
const executeMulticall = async (walletAddress, tokens, multicallAddress, chainId) => {
    // Collect calls we want to make
    const calls = [];
    tokens.map((token) => {
        if ((0, utils_1.isZeroAddress)(token.address)) {
            calls.push({
                address: multicallAddress,
                name: 'getEthBalance',
                params: [walletAddress],
            });
        }
        else {
            calls.push({
                address: token.address,
                name: 'balanceOf',
                params: [walletAddress],
            });
        }
    });
    const res = await fetchViaMulticall(calls, balanceAbi, chainId, multicallAddress);
    if (!res.length) {
        return [];
    }
    return tokens.map((token, i) => {
        const amount = new bignumber_js_1.default(res[i].amount.toString() || '0')
            .shiftedBy(-token.decimals)
            .toFixed();
        return {
            ...token,
            amount: amount || '0',
            blockNumber: res[i].blockNumber,
        };
    });
};
const fetchViaMulticall = async (calls, abi, chainId, multicallAddress) => {
    const result = await (0, multicall_1.fetchDataUsingMulticall)(calls, abi, chainId, multicallAddress);
    return result.map(({ data, blockNumber }) => ({
        amount: data ? data : new bignumber_js_1.default(0),
        blockNumber,
    }));
};
const getBalancesFromProvider = async (walletAddress, tokens) => {
    const chainId = tokens[0].chainId;
    const rpc = await (0, connectors_1.getRpcProvider)(chainId);
    const tokenAmountPromises = tokens.map(async (token) => {
        let amount = '0';
        let blockNumber;
        try {
            const balance = await getBalanceFromProvider(walletAddress, token.address, chainId, rpc);
            amount = new bignumber_js_1.default(balance.amount.toString())
                .shiftedBy(-token.decimals)
                .toString();
            blockNumber = balance.blockNumber;
        }
        catch (e) {
            // eslint-disable-next-line no-console
            console.warn(e);
        }
        return {
            ...token,
            amount,
            blockNumber,
        };
    });
    return Promise.all(tokenAmountPromises);
};
const getBalanceFromProvider = async (walletAddress, assetId, chainId, provider) => {
    const blockNumber = await getCurrentBlockNumber(chainId);
    let balance;
    if ((0, utils_1.isZeroAddress)(assetId)) {
        balance = await provider.getBalance(walletAddress, blockNumber);
    }
    else {
        const contract = new ethers_1.ethers.Contract(assetId, ['function balanceOf(address owner) view returns (uint256)'], provider);
        balance = await contract.balanceOf(walletAddress, {
            blockTag: blockNumber,
        });
    }
    return {
        amount: balance,
        blockNumber,
    };
};
const getCurrentBlockNumber = async (chainId) => {
    const rpc = await (0, connectors_1.getRpcProvider)(chainId);
    return rpc.getBlockNumber();
};
exports.default = {
    getBalances: exports.getBalances,
};
