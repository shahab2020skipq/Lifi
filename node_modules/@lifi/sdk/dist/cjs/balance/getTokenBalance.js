"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenBalancesForChains = exports.getTokenBalances = exports.getTokenBalance = void 0;
const utils_1 = __importDefault(require("./utils"));
const getTokenBalance = async (walletAddress, token) => {
    const tokenAmounts = await (0, exports.getTokenBalances)(walletAddress, [token]);
    return tokenAmounts.length ? tokenAmounts[0] : null;
};
exports.getTokenBalance = getTokenBalance;
const getTokenBalances = async (walletAddress, tokens) => {
    // split by chain
    const tokensByChain = {};
    tokens.forEach((token) => {
        if (!tokensByChain[token.chainId]) {
            tokensByChain[token.chainId] = [];
        }
        tokensByChain[token.chainId].push(token);
    });
    const tokenAmountsByChain = await (0, exports.getTokenBalancesForChains)(walletAddress, tokensByChain);
    return Object.values(tokenAmountsByChain).flat();
};
exports.getTokenBalances = getTokenBalances;
const getTokenBalancesForChains = async (walletAddress, tokensByChain) => {
    const tokenAmountsByChain = {};
    const promises = Object.keys(tokensByChain).map(async (chainIdStr) => {
        const chainId = parseInt(chainIdStr);
        const tokenAmounts = await utils_1.default.getBalances(walletAddress, tokensByChain[chainId]);
        tokenAmountsByChain[chainId] = tokenAmounts;
    });
    await Promise.allSettled(promises);
    return tokenAmountsByChain;
};
exports.getTokenBalancesForChains = getTokenBalancesForChains;
