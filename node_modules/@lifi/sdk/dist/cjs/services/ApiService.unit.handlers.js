"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlers = void 0;
const types_1 = require("@lifi/types");
const msw_1 = require("msw");
const ConfigService_1 = __importDefault(require("./ConfigService"));
const config = ConfigService_1.default.getInstance().getConfig();
exports.handlers = [
    msw_1.rest.post(`${config.apiUrl}/advanced/routes`, async (request, response, context) => {
        const data = await request.json();
        if (isNaN(parseFloat(data.fromAmount))) {
            return response(context.status(500), context.json({ message: `Oops` }));
        }
        return response(context.json({}));
    }),
    msw_1.rest.post(`${config.apiUrl}/advanced/possibilities`, async (request, response, context) => {
        return response(context.json({}));
    }),
    msw_1.rest.get(`${config.apiUrl}/token`, async (request, response, context) => {
        return response(context.json({}));
    }),
    msw_1.rest.get(`${config.apiUrl}/quote`, async (request, response, context) => {
        return response(context.json({}));
    }),
    msw_1.rest.get(`${config.apiUrl}/status`, async (request, response, context) => {
        return response(context.json({}));
    }),
    msw_1.rest.get(`${config.apiUrl}/chains`, async (request, response, context) => {
        return response(context.json({ chains: [{ id: 1 }] }));
    }),
    msw_1.rest.get(`${config.apiUrl}/tools`, async (request, response, context) => {
        return response(context.json({ bridges: [], exchanges: [] }));
    }),
    msw_1.rest.get(`${config.apiUrl}/tokens`, async (request, response, context) => {
        return response(context.json({
            tokens: {
                [types_1.ChainId.ETH]: [(0, types_1.findDefaultToken)(types_1.CoinKey.ETH, types_1.ChainId.ETH)],
            },
        }));
    }),
    msw_1.rest.post(`${config.apiUrl}/advanced/stepTransaction`, async (request, response, context) => {
        return response(context.json({}));
    }),
    msw_1.rest.get(`${config.apiUrl}/gas/suggestion/${types_1.ChainId.OPT}`, async (request, response, context) => {
        return response(context.json({}));
    }),
];
