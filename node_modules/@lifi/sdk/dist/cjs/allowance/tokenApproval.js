"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revokeTokenApproval = exports.approveToken = exports.bulkGetTokenApproval = exports.getTokenApproval = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ethers_1 = require("ethers");
const helpers_1 = require("../helpers");
const utils_1 = require("../utils/utils");
const utils_2 = require("./utils");
const getTokenApproval = async (signer, token, approvalAddress) => {
    // native token don't need approval
    if ((0, utils_1.isNativeTokenAddress)(token.address)) {
        return;
    }
    const approved = await (0, utils_2.getApproved)(signer, token.address, approvalAddress);
    return approved.toFixed(0);
};
exports.getTokenApproval = getTokenApproval;
const bulkGetTokenApproval = async (signer, tokenData) => {
    // filter out native tokens
    const filteredTokenData = tokenData.filter(({ token }) => !(0, utils_1.isNativeTokenAddress)(token.address));
    // group by chain
    const tokenDataByChain = (0, utils_2.groupByChain)(filteredTokenData);
    const approvalPromises = Object.keys(tokenDataByChain).map(async (chainId) => {
        const parsedChainId = Number.parseInt(chainId);
        // get allowances for current chain and token list
        return (0, utils_2.getAllowanceViaMulticall)(signer, parsedChainId, tokenDataByChain[parsedChainId]);
    });
    const approvalsByChain = await Promise.all(approvalPromises);
    const approvals = approvalsByChain.flat();
    return tokenData.map(({ token }) => {
        // native token don't need approval
        if ((0, utils_1.isNativeTokenAddress)(token.address)) {
            return { token, approval: undefined };
        }
        const approved = approvals.find((approval) => (0, helpers_1.isSameToken)(approval.token, token));
        return { token, approval: approved?.approvedAmount.toString() };
    });
};
exports.bulkGetTokenApproval = bulkGetTokenApproval;
const approveToken = async ({ signer, token, approvalAddress, amount, infiniteApproval = false, }) => {
    // native token don't need approval
    if ((0, utils_1.isNativeTokenAddress)(token.address)) {
        return;
    }
    const approvedAmount = await (0, utils_2.getApproved)(signer, token.address, approvalAddress);
    if (new bignumber_js_1.default(amount).gt(approvedAmount)) {
        const approvalAmount = infiniteApproval
            ? ethers_1.constants.MaxUint256.toString()
            : amount;
        const approveTx = await (0, utils_2.setApproval)(signer, token.address, approvalAddress, approvalAmount);
        await approveTx.wait();
    }
};
exports.approveToken = approveToken;
const revokeTokenApproval = async ({ signer, token, approvalAddress, }) => {
    // native token don't need approval
    if ((0, utils_1.isNativeTokenAddress)(token.address)) {
        return;
    }
    const approvedAmount = await (0, utils_2.getApproved)(signer, token.address, approvalAddress);
    if (!approvedAmount.isZero()) {
        const approveTx = await (0, utils_2.setApproval)(signer, token.address, approvalAddress, '0');
        await approveTx.wait();
    }
};
exports.revokeTokenApproval = revokeTokenApproval;
