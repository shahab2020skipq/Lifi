"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepExecutor = void 0;
const StepExecutionManager_1 = require("./StepExecutionManager");
const switchChain_1 = require("./switchChain");
// Please be careful when changing the defaults as it may break the behavior (e.g., background execution)
const defaultInteractionSettings = {
    allowInteraction: true,
    allowUpdates: true,
    stopExecution: false,
};
class StepExecutor {
    constructor(statusManager, settings) {
        this.allowUserInteraction = true;
        this.executionStopped = false;
        this.setInteraction = (settings) => {
            const interactionSettings = {
                ...defaultInteractionSettings,
                ...settings,
            };
            this.allowUserInteraction = interactionSettings.allowInteraction;
            this.stepExecutionManager.allowInteraction(interactionSettings.allowInteraction);
            this.statusManager.allowUpdates(interactionSettings.allowUpdates);
            this.executionStopped = interactionSettings.stopExecution;
        };
        // TODO: add checkChain method and update signer inside executors
        // This can come in handy when we execute multiple routes simultaneously and
        // should be sure that we are on the right chain when waiting for transactions.
        this.checkChain = () => {
            throw new Error('checkChain is not implemented.');
        };
        this.executeStep = async (signer, step) => {
            // Make sure that the chain is still correct
            const updatedSigner = await (0, switchChain_1.switchChain)(signer, this.statusManager, step, this.settings.switchChainHook, this.allowUserInteraction);
            if (!updatedSigner) {
                // Chain switch was not successful, stop execution here
                return step;
            }
            signer = updatedSigner;
            const parameters = {
                signer,
                step,
                settings: this.settings,
                statusManager: this.statusManager,
            };
            await this.stepExecutionManager.execute(parameters);
            return step;
        };
        this.stepExecutionManager = new StepExecutionManager_1.StepExecutionManager();
        this.statusManager = statusManager;
        this.settings = settings;
    }
}
exports.StepExecutor = StepExecutor;
