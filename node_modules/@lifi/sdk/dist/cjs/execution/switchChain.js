"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.switchChain = void 0;
const errors_1 = require("../utils/errors");
/**
 * This method checks whether the signer is configured for the correct chain.
 * If yes it returns the signer.
 * If no and if user interaction is allowed it triggers the switchChainHook. If no user interaction is allowed it aborts.
 *
 * @param signer
 * @param statusManager
 * @param step
 * @param switchChainHook
 * @param allowUserInteraction
 */
const switchChain = async (signer, statusManager, step, switchChainHook, allowUserInteraction) => {
    // if we are already on the correct chain we can proceed directly
    if ((await signer.getChainId()) === step.action.fromChainId) {
        return signer;
    }
    // -> set status message
    step.execution = statusManager.initExecutionObject(step);
    statusManager.updateExecution(step, 'ACTION_REQUIRED');
    let switchProcess = statusManager.findOrCreateProcess(step, 'SWITCH_CHAIN', 'ACTION_REQUIRED');
    if (!allowUserInteraction) {
        return;
    }
    try {
        const updatedSigner = await switchChainHook(step.action.fromChainId);
        const updatedChainId = await updatedSigner?.getChainId();
        if (updatedChainId !== step.action.fromChainId) {
            throw new errors_1.ProviderError(errors_1.LifiErrorCode.ChainSwitchError, 'Chain switch required.');
        }
        switchProcess = statusManager.updateProcess(step, switchProcess.type, 'DONE');
        statusManager.updateExecution(step, 'PENDING');
        return updatedSigner;
    }
    catch (error) {
        statusManager.updateProcess(step, switchProcess.type, 'FAILED', {
            error: {
                message: error.message,
                code: errors_1.LifiErrorCode.ChainSwitchError,
            },
        });
        statusManager.updateExecution(step, 'FAILED');
        throw error;
    }
};
exports.switchChain = switchChain;
