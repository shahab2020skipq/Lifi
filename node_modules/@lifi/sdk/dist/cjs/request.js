"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = exports.requestSettings = void 0;
const ConfigService_1 = __importDefault(require("./services/ConfigService"));
const errors_1 = require("./utils/errors");
const utils_1 = require("./utils/utils");
const version_1 = require("./version");
exports.requestSettings = {
    retries: 1,
};
const request = async (url, options = {
    retries: exports.requestSettings.retries,
}) => {
    const { userId, integrator, widgetVersion } = ConfigService_1.default.getInstance().getConfig();
    options.retries = options.retries ?? exports.requestSettings.retries;
    try {
        if (!options.skipTrackingHeaders) {
            if (userId) {
                options.headers = {
                    ...options?.headers,
                    'X-LIFI-UserId': userId,
                };
            }
            if (widgetVersion) {
                options.headers = {
                    ...options?.headers,
                    'X-LIFI-Widget': widgetVersion,
                };
            }
            if (version_1.version) {
                options.headers = {
                    ...options?.headers,
                    'X-LIFI-SDK': version_1.version,
                };
            }
            // integrator is mandatory during SDK initialization
            options.headers = {
                ...options?.headers,
                'X-LIFI-Integrator': integrator,
            };
        }
        const response = await fetch(url, options);
        if (!response.ok) {
            throw new errors_1.HTTPError(response);
        }
        const data = await response.json();
        return data;
    }
    catch (error) {
        if (options.retries > 0 && error?.status === 500) {
            await (0, utils_1.sleep)(500);
            return (0, exports.request)(url, { ...options, retries: options.retries - 1 });
        }
        throw error;
    }
};
exports.request = request;
