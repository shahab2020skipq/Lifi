"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConnections = exports.LiFi = void 0;
const allowance_1 = require("./allowance");
const balance = __importStar(require("./balance"));
const connectors_1 = require("./connectors");
const RouteExecutionManager_1 = require("./execution/RouteExecutionManager");
const helpers_1 = require("./helpers");
const ApiService_1 = __importDefault(require("./services/ApiService"));
const ChainsService_1 = __importDefault(require("./services/ChainsService"));
const typeguards_1 = require("./typeguards");
const errors_1 = require("./utils/errors");
const version_1 = require("./version");
class LiFi extends RouteExecutionManager_1.RouteExecutionManager {
    constructor(configUpdate) {
        super(configUpdate);
        /**
         * Get the current configuration of the SDK
         * @return {Config} - The config object
         */
        this.getConfig = () => {
            return this.configService.getConfig();
        };
        /**
         * Get the SDK configuration after all setup calls are finished
         * @return {Promise<Config>} - The config object
         */
        this.getConfigAsync = () => {
            return this.configService.getConfigAsync();
        };
        /**
         * Get an instance of a provider for a specific cahin
         * @param {number} chainId - Id of the chain the provider is for
         * @param {boolean} archive - Whether to use an archive provider that is based on a default rpc or not. defaults to false
         * @return {FallbackProvider} The provider for the given chain
         */
        this.getRpcProvider = (chainId, archive = false) => {
            return (0, connectors_1.getRpcProvider)(chainId, archive);
        };
        /**
         * Set a new confuration for the SDK
         * @param {ConfigUpdate} configUpdate - An object containing the configuration fields that should be updated.
         * @return {Config} The renewed config object
         */
        this.setConfig = (configUpdate) => {
            return this.configService.updateConfig(configUpdate);
        };
        /**
         * Get a set of current possibilities based on a request that specifies which chains, exchanges and bridges are preferred or unwanted.
         * @param {PossibilitiesRequest} request - Object defining preferences regarding chain, exchanges and bridges
         * @return {Promise<PossibilitiesResponse>} Object listing current possibilities for any-to-any cross-chain-swaps based on the provided preferences.
         * @throws {LifiError} Throws a LifiError if request fails.
         */
        this.getPossibilities = async (request, options) => {
            return ApiService_1.default.getPossibilities(request, options);
        };
        /**
         * Fetch information about a Token
         * @param {ChainKey | ChainId} chain - Id or key of the chain that contains the token
         * @param {string} token - Address or symbol of the token on the requested chain
         * @throws {LifiError} - Throws a LifiError if request fails
         */
        this.getToken = async (chain, token, options) => {
            return ApiService_1.default.getToken(chain, token, options);
        };
        /**
         * Get a quote for a token transfer
         * @param {QuoteRequest} request - The configuration of the requested quote
         * @throws {LifiError} - Throws a LifiError if request fails
         */
        this.getQuote = async (request, options) => {
            return ApiService_1.default.getQuote(request, options);
        };
        /**
         * Get a quote for a destination contract call
         * @param {ContractCallQuoteRequest} request - The configuration of the requested destination call
         * @throws {LifiError} - Throws a LifiError if request fails
         */
        this.getContractCallQuote = async (request, options) => {
            return ApiService_1.default.getContractCallQuote(request, options);
        };
        /**
         * Check the status of a transfer. For cross chain transfers, the "bridge" parameter is required.
         * @param {GetStatusRequest} request - Configuration of the requested status
         * @throws {LifiError} - Throws a LifiError if request fails
         */
        this.getStatus = async (request, options) => {
            return ApiService_1.default.getStatus(request, options);
        };
        /**
         * Get the available tools to bridge and swap tokens.
         * @param {ToolsRequest?} request - The configuration of the requested tools
         * @returns The tools that are available on the requested chains
         */
        this.getTools = async (request, options) => {
            return ApiService_1.default.getTools(request || {}, options);
        };
        /**
         * Get all known tokens.
         * @param {TokensRequest?} request - The configuration of the requested tokens
         * @returns The tokens that are available on the requested chains
         */
        this.getTokens = async (request, options) => {
            return ApiService_1.default.getTokens(request || {}, options);
        };
        /**
         * Get all available chains
         * @return {Promise<Chain[]>} A list of all available chains
         * @throws {LifiError} Throws a LifiError if request fails.
         */
        this.getChains = async () => {
            return this.chainsService.getChains();
        };
        /**
         * Get a set of routes for a request that describes a transfer of tokens.
         * @param {RoutesRequest} request - A description of the transfer.
         * @return {Promise<RoutesResponse>} The resulting routes that can be used to realize the described transfer of tokens.
         * @throws {LifiError} Throws a LifiError if request fails.
         */
        this.getRoutes = async (request, options) => {
            return ApiService_1.default.getRoutes(request, options);
        };
        /**
         * Get the transaction data for a single step of a route
         * @param {LifiStep} step - The step object.
         * @return {Promise<Step>} The step populated with the transaction data.
         * @throws {LifiError} Throws a LifiError if request fails.
         */
        this.getStepTransaction = async (step, options) => {
            return ApiService_1.default.getStepTransaction(step, options);
        };
        /**
         * Get gas recommendation for a certain chain
         * @param {GasRecommendationRequest} request - Configuration of the requested recommendation.
         * @throws {LifiError} Throws a LifiError if request fails.
         */
        this.getGasRecommendation = async (request, options) => {
            return ApiService_1.default.getGasRecommendation(request, options);
        };
        /**
         * Returns the balances of a specific token a wallet holds across all aggregated chains.
         * @param {string} walletAddress - A wallet address.
         * @param {Token} token - A Token object.
         * @return {Promise<TokenAmount | null>} An object containing the token and the amounts on different chains.
         * @throws {ValidationError} Throws a ValidationError if parameters are invalid.
         */
        this.getTokenBalance = async (walletAddress, token) => {
            if (!walletAddress) {
                throw new errors_1.ValidationError('Missing walletAddress.');
            }
            if (!(0, typeguards_1.isToken)(token)) {
                throw new errors_1.ValidationError(`Invalid token passed: address "${token.address}" on chainId "${token.chainId}"`);
            }
            return balance.getTokenBalance(walletAddress, token);
        };
        /**
         * Returns the balances for a list tokens a wallet holds  across all aggregated chains.
         * @param {string} walletAddress - A wallet address.
         * @param {Token[]} tokens - A list of Token objects.
         * @return {Promise<TokenAmount[]>} A list of objects containing the tokens and the amounts on different chains.
         * @throws {ValidationError} Throws a ValidationError if parameters are invalid.
         */
        this.getTokenBalances = async (walletAddress, tokens) => {
            if (!walletAddress) {
                throw new errors_1.ValidationError('Missing walletAddress.');
            }
            const invalidTokens = tokens.filter((token) => !(0, typeguards_1.isToken)(token));
            if (invalidTokens.length) {
                throw new errors_1.ValidationError(`Invalid token passed: address "${invalidTokens[0].address}" on chainId "${invalidTokens[0].chainId}"`);
            }
            return balance.getTokenBalances(walletAddress, tokens);
        };
        /**
         * This method queries the balances of tokens for a specific list of chains for a given wallet.
         * @param {string} walletAddress - A walletaddress.
         * @param {{ [chainId: number]: Token[] }} tokensByChain - A list of Token objects organized by chain ids.
         * @return {Promise<{ [chainId: number]: TokenAmount[] }>} A list of objects containing the tokens and the amounts on different chains organized by the chosen chains.
         * @throws {ValidationError} Throws a ValidationError if parameters are invalid.
         */
        this.getTokenBalancesForChains = async (walletAddress, tokensByChain) => {
            if (!walletAddress) {
                throw new errors_1.ValidationError('Missing walletAddress.');
            }
            const tokenList = Object.values(tokensByChain).flat();
            const invalidTokens = tokenList.filter((token) => !(0, typeguards_1.isToken)(token));
            if (invalidTokens.length) {
                throw new errors_1.ValidationError(`Invalid token passed: address "${invalidTokens[0].address}" on chainId "${invalidTokens[0].chainId}"`);
            }
            return balance.getTokenBalancesForChains(walletAddress, tokensByChain);
        };
        /**
         * Get the current approval for a certain token.
         * @param signer - The signer owning the token
         * @param token - The token that should be checked
         * @param approvalAddress - The address that has be approved
         */
        this.getTokenApproval = async (signer, token, approvalAddress) => {
            return (0, allowance_1.getTokenApproval)(signer, token, approvalAddress);
        };
        /**
         * Get the current approval for a list of token / approval address pairs.
         * @param signer - The signer owning the tokens
         * @param tokenData - A list of token and approval address pairs
         */
        this.bulkGetTokenApproval = async (signer, tokenData) => {
            return (0, allowance_1.bulkGetTokenApproval)(signer, tokenData);
        };
        /**
         * Set approval for a certain token and amount.
         * @param { ApproveTokenRequest } request - The approval request
         */
        this.approveToken = (request) => {
            return (0, allowance_1.approveToken)(request);
        };
        /**
         * Revoke approval for a certain token.
         * @param { RevokeApprovalRequest } request - The revoke request
         */
        this.revokeTokenApproval = (request) => {
            return (0, allowance_1.revokeTokenApproval)(request);
        };
        this.chainsService = ChainsService_1.default.getInstance();
        this.chainsService.getChains().then((chains) => {
            this.configService.updateChains(chains);
        });
        (0, helpers_1.checkPackageUpdates)(version_1.name, version_1.version, configUpdate?.disableVersionCheck);
    }
}
exports.LiFi = LiFi;
/**
 * Get all the available connections for swap/bridging tokens
 * @param connectionRequest ConnectionsRequest
 * @returns ConnectionsResponse
 */
const getConnections = async (connectionRequest) => {
    const connections = await ApiService_1.default.getAvailableConnections(connectionRequest);
    return connections;
};
exports.getConnections = getConnections;
