"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_hook_form_1 = require("react-hook-form");
const react_i18next_1 = require("react-i18next");
const providers_1 = require("../../providers");
const types_1 = require("../../types");
const utils_1 = require("../../utils");
const Card_1 = require("../Card");
const FitInputText_1 = require("./FitInputText");
const FormPriceHelperText_1 = require("./FormPriceHelperText");
const SwapInput_style_1 = require("./SwapInput.style");
const SwapInputEndAdornment_1 = require("./SwapInputEndAdornment");
const SwapInputStartAdornment_1 = require("./SwapInputStartAdornment");
const SwapInput = ({ formType, ...props }) => {
    const { t } = (0, react_i18next_1.useTranslation)();
    const amountKey = providers_1.SwapFormKeyHelper.getAmountKey(formType);
    const { field: { onChange, onBlur, value }, } = (0, react_hook_form_1.useController)({
        name: amountKey,
    });
    const { disabledUI } = (0, providers_1.useWidgetConfig)();
    const ref = (0, react_1.useRef)(null);
    const handleChange = (event) => {
        const { value } = event.target;
        const formattedAmount = (0, utils_1.formatAmount)(value, true);
        onChange(formattedAmount);
    };
    const handleBlur = (event) => {
        const { value } = event.target;
        const formattedAmount = (0, utils_1.formatAmount)(value);
        onChange(formattedAmount);
        onBlur();
    };
    const disabled = disabledUI?.includes(types_1.DisabledUI.FromAmount);
    return ((0, jsx_runtime_1.jsxs)(Card_1.Card, { ...props, children: [(0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: t('swap.fromAmount') }), (0, jsx_runtime_1.jsxs)(SwapInput_style_1.FormControl, { fullWidth: true, children: [(0, jsx_runtime_1.jsx)(SwapInput_style_1.Input, { inputRef: ref, size: "small", autoComplete: "off", placeholder: "0", startAdornment: (0, jsx_runtime_1.jsx)(SwapInputStartAdornment_1.SwapInputStartAdornment, { formType: formType }), endAdornment: !disabled ? ((0, jsx_runtime_1.jsx)(SwapInputEndAdornment_1.SwapInputEndAdornment, { formType: formType })) : undefined, inputProps: {
                            inputMode: 'decimal',
                        }, onChange: handleChange, onBlur: handleBlur, value: value, name: amountKey, disabled: disabled, required: true }), (0, jsx_runtime_1.jsx)(FormPriceHelperText_1.FormPriceHelperText, { formType: formType })] }), (0, jsx_runtime_1.jsx)(FitInputText_1.FitInputText, { ref: ref, formType: formType })] }));
};
exports.SwapInput = SwapInput;
