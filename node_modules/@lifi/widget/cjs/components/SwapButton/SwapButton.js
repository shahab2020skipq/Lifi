"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const lab_1 = require("@mui/lab");
const react_i18next_1 = require("react-i18next");
const react_router_dom_1 = require("react-router-dom");
const providers_1 = require("../../providers");
const utils_1 = require("../../utils");
const SwapButton = ({ onClick, hasRoute, text, disabled, loading, }) => {
    const { t } = (0, react_i18next_1.useTranslation)();
    const navigate = (0, react_router_dom_1.useNavigate)();
    const { variant, walletManagement } = (0, providers_1.useWidgetConfig)();
    const { account, connect } = (0, providers_1.useWallet)();
    const handleSwapButtonClick = async () => {
        if (!account.isActive) {
            if (walletManagement) {
                await connect();
            }
            else {
                navigate(utils_1.navigationRoutes.selectWallet);
            }
        }
        else {
            onClick?.();
        }
    };
    const getButtonText = () => {
        if (account.isActive) {
            if (!hasRoute) {
                return variant !== 'refuel' ? t(`button.swap`) : t(`button.getGas`);
            }
            if (text) {
                return text;
            }
            return variant !== 'refuel'
                ? t(`button.reviewSwap`)
                : t(`button.reviewGasSwap`);
        }
        return t(`button.connectWallet`);
    };
    return ((0, jsx_runtime_1.jsx)(lab_1.LoadingButton, { variant: "contained", color: "primary", onClick: handleSwapButtonClick, disabled: disabled, loading: loading, loadingPosition: "center", fullWidth: true, children: getButtonText() }));
};
exports.SwapButton = SwapButton;
