"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsuranceCollapsed = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const material_1 = require("@mui/material");
const react_1 = require("react");
const hooks_1 = require("../../hooks");
const stores_1 = require("../../stores");
const InsuranceCard_1 = require("./InsuranceCard");
const InsuranceCollapsed = ({ status, insurableRouteId, insuranceCoverageId, feeAmountUsd, onChange, ...props }) => {
    const [insuredRoute, setInsuredRoute] = (0, react_1.useState)();
    const setExecutableRoute = (0, stores_1.useSetExecutableRoute)();
    const routeExecution = (0, stores_1.useRouteExecutionStore)((state) => state.routes[insurableRouteId]);
    (0, hooks_1.useSwapRoutes)({
        insurableRoute: routeExecution?.route,
        onSettled(data) {
            if (data?.routes?.[0]) {
                setInsuredRoute(data.routes[0]);
            }
        },
    });
    const toggleInsurance = (_, checked) => {
        if (insuredRoute) {
            if (checked) {
                setExecutableRoute(insuredRoute, insurableRouteId);
            }
            onChange?.(checked ? insuredRoute.id : insurableRouteId);
        }
    };
    return ((0, jsx_runtime_1.jsx)(material_1.Collapse, { timeout: 225, in: insuredRoute?.insurance?.state === 'INSURED', unmountOnExit: true, mountOnEnter: true, appear: status === stores_1.RouteExecutionStatus.Idle, children: (0, jsx_runtime_1.jsx)(InsuranceCard_1.InsuranceCard, { feeAmountUsd: feeAmountUsd, status: status, insuranceCoverageId: insuranceCoverageId, onChange: toggleInsurance, ...props }) }));
};
exports.InsuranceCollapsed = InsuranceCollapsed;
