"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTokenSelect = void 0;
const react_1 = require("react");
const react_hook_form_1 = require("react-hook-form");
const providers_1 = require("../../providers");
const useTokenSelect = (formType, onClick) => {
    const tokenKey = providers_1.SwapFormKeyHelper.getTokenKey(formType);
    const { field: { onChange, onBlur }, } = (0, react_hook_form_1.useController)({ name: tokenKey });
    const { setValue, getValues } = (0, react_hook_form_1.useFormContext)();
    return (0, react_1.useCallback)((tokenAddress, chainId) => {
        onChange(tokenAddress);
        onBlur();
        const selectedChainId = chainId ?? getValues(providers_1.SwapFormKeyHelper.getChainKey(formType));
        // Set chain again to trigger URL builder update
        setValue(providers_1.SwapFormKeyHelper.getChainKey(formType), selectedChainId, {
            shouldDirty: true,
            shouldTouch: true,
        });
        setValue(providers_1.SwapFormKeyHelper.getAmountKey(formType), '');
        const oppositeFormType = formType === 'from' ? 'to' : 'from';
        const [selectedOppositeToken, selectedOppositeChainId] = getValues([
            providers_1.SwapFormKeyHelper.getTokenKey(oppositeFormType),
            providers_1.SwapFormKeyHelper.getChainKey(oppositeFormType),
        ]);
        if (selectedOppositeToken === tokenAddress &&
            selectedOppositeChainId === selectedChainId) {
            setValue(providers_1.SwapFormKeyHelper.getTokenKey(oppositeFormType), '', {
                shouldDirty: true,
                shouldTouch: true,
            });
        }
        onClick?.();
    }, [formType, getValues, onBlur, onChange, onClick, setValue]);
};
exports.useTokenSelect = useTokenSelect;
