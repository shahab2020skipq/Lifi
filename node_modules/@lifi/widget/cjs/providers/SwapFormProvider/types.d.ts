export declare enum SwapFormKey {
    ContractOutputsToken = "contractOutputsToken",
    FromAmount = "fromAmount",
    FromChain = "fromChain",
    FromToken = "fromToken",
    ToAddress = "toAddress",
    ToAmount = "toAmount",
    ToChain = "toChain",
    ToContractAddress = "toContractAddress",
    ToContractCallData = "toContractCallData",
    ToContractGasLimit = "ToContractGasLimit",
    ToToken = "toToken",
    TokenSearchFilter = "tokenSearchFilter"
}
export type SwapFormValues = {
    [SwapFormKey.ContractOutputsToken]: string;
    [SwapFormKey.FromAmount]: string;
    [SwapFormKey.FromChain]: number;
    [SwapFormKey.FromToken]: string;
    [SwapFormKey.ToAddress]: string;
    [SwapFormKey.ToAmount]: string;
    [SwapFormKey.ToChain]: number;
    [SwapFormKey.ToContractAddress]: string;
    [SwapFormKey.ToContractCallData]: string;
    [SwapFormKey.ToContractGasLimit]: string;
    [SwapFormKey.ToToken]: string;
    [SwapFormKey.TokenSearchFilter]: string;
};
export type SwapFormType = 'from' | 'to';
export declare const SwapFormKeyHelper: {
    getChainKey: (formType: SwapFormType) => 'fromChain' | 'toChain';
    getTokenKey: (formType: SwapFormType) => 'fromToken' | 'toToken';
    getAmountKey: (formType: SwapFormType) => 'fromAmount' | 'toAmount';
};
export interface SwapFormTypeProps {
    formType: SwapFormType;
}
