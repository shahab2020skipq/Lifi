"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapRoutesPage = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Header_1 = require("../../components/Header");
const ProgressToNextUpdate_1 = require("../../components/ProgressToNextUpdate");
const SwapRouteCard_1 = require("../../components/SwapRouteCard");
const hooks_1 = require("../../hooks");
const stores_1 = require("../../stores");
const utils_1 = require("../../utils");
const SwapRoutesPage_style_1 = require("./SwapRoutesPage.style");
const SwapRoutesPage = () => {
    const { navigateBack, navigate } = (0, hooks_1.useNavigateBack)();
    const { routes: swapRoutes, isLoading, isFetching, dataUpdatedAt, refetchTime, refetch, } = (0, hooks_1.useSwapRoutes)();
    const setExecutableRoute = (0, stores_1.useSetExecutableRoute)();
    const handleRouteClick = (route) => {
        setExecutableRoute(route);
        navigate(utils_1.navigationRoutes.swapExecution, {
            state: { routeId: route.id },
        });
    };
    (0, react_1.useEffect)(() => {
        if (!swapRoutes?.length && !isLoading && !isFetching) {
            navigateBack();
        }
        // redirect to the home page if no routes are found on page reload
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    (0, react_1.useEffect)(() => {
        return Header_1.useHeaderActionStore
            .getState()
            .setAction((0, jsx_runtime_1.jsx)(ProgressToNextUpdate_1.ProgressToNextUpdate, { updatedAt: dataUpdatedAt || new Date().getTime(), timeToUpdate: refetchTime, isLoading: isFetching, onClick: () => refetch(), sx: { marginRight: -1 }, size: "medium", edge: "end" }));
    }, [dataUpdatedAt, isFetching, refetch, refetchTime]);
    const routeNotFound = !swapRoutes?.length && !isLoading && !isFetching;
    return ((0, jsx_runtime_1.jsx)(SwapRoutesPage_style_1.Stack, { direction: "column", spacing: 2, flex: 1, children: routeNotFound ? ((0, jsx_runtime_1.jsx)(SwapRouteCard_1.SwapRouteNotFoundCard, {})) : isLoading ? (Array.from({ length: 3 }).map((_, index) => ((0, jsx_runtime_1.jsx)(SwapRouteCard_1.SwapRouteCardSkeleton, {}, index)))) : (swapRoutes?.map((route, index) => ((0, jsx_runtime_1.jsx)(SwapRouteCard_1.SwapRouteCard, { route: route, onClick: () => handleRouteClick(route), active: index === 0, expanded: swapRoutes?.length <= 2 }, route.id)))) }));
};
exports.SwapRoutesPage = SwapRoutesPage;
