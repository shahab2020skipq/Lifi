"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartIdleSwapButton = exports.StartSwapButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const SwapButton_1 = require("../../components/SwapButton");
const hooks_1 = require("../../hooks");
const stores_1 = require("../../stores");
const StartSwapButton = ({ onClick, route, text, loading, }) => {
    const { insufficientGas, isInitialLoading: isGasSufficiencyLoading } = (0, hooks_1.useGasSufficiency)(route);
    const { insufficientFunds, isInitialLoading: isFundsSufficiencyLoading } = (0, hooks_1.useFundsSufficiency)(route);
    return ((0, jsx_runtime_1.jsx)(SwapButton_1.SwapButton, { onClick: onClick, text: text, hasRoute: Boolean(route), disabled: insufficientFunds || !!insufficientGas?.length, loading: isFundsSufficiencyLoading || isGasSufficiencyLoading || loading }));
};
exports.StartSwapButton = StartSwapButton;
const StartIdleSwapButton = ({ onClick, route, text, loading, disabled, insurableRouteId, }) => {
    const routeExecution = (0, stores_1.useRouteExecutionStore)((state) => state.routes[insurableRouteId]);
    const { isFetching } = (0, hooks_1.useSwapRoutes)({
        insurableRoute: routeExecution?.route,
    });
    return ((0, jsx_runtime_1.jsx)(exports.StartSwapButton, { onClick: onClick, text: text, route: route, disabled: disabled, loading: loading || isFetching, insurableRouteId: insurableRouteId }));
};
exports.StartIdleSwapButton = StartIdleSwapButton;
