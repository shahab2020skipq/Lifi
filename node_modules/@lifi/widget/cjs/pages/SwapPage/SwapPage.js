"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapPage = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Delete_1 = require("@mui/icons-material/Delete");
const material_1 = require("@mui/material");
const react_1 = require("react");
const react_hook_form_1 = require("react-hook-form");
const react_i18next_1 = require("react-i18next");
const react_router_dom_1 = require("react-router-dom");
const GasMessage_1 = require("../../components/GasMessage");
const Insurance_1 = require("../../components/Insurance");
const Step_1 = require("../../components/Step");
const hooks_1 = require("../../hooks");
const providers_1 = require("../../providers");
const stores_1 = require("../../stores");
const ExchangeRateBottomSheet_1 = require("./ExchangeRateBottomSheet");
const StartSwapButton_1 = require("./StartSwapButton");
const StatusBottomSheet_1 = require("./StatusBottomSheet");
const SwapPage_style_1 = require("./SwapPage.style");
const TokenValueBottomSheet_1 = require("./TokenValueBottomSheet");
const SwapPage = () => {
    const { t } = (0, react_i18next_1.useTranslation)();
    const { setValue } = (0, react_hook_form_1.useFormContext)();
    const { navigateBack } = (0, hooks_1.useNavigateBack)();
    const { variant, insurance } = (0, providers_1.useWidgetConfig)();
    const { state } = (0, react_router_dom_1.useLocation)();
    const stateRouteId = state?.routeId;
    const [routeId, setRouteId] = (0, react_1.useState)(stateRouteId);
    const tokenValueBottomSheetRef = (0, react_1.useRef)(null);
    const exchangeRateBottomSheetRef = (0, react_1.useRef)(null);
    const { route, status, executeRoute, restartRoute, deleteRoute } = (0, hooks_1.useRouteExecution)({
        routeId: routeId,
        onAcceptExchangeRateUpdate: exchangeRateBottomSheetRef.current?.open,
    });
    const handleExecuteRoute = (0, react_1.useCallback)(() => {
        if (tokenValueBottomSheetRef.current?.isOpen()) {
            tokenValueBottomSheetRef.current?.close();
        }
        executeRoute();
        setValue(providers_1.SwapFormKey.FromAmount, '');
    }, [executeRoute, setValue]);
    const handleSwapClick = async () => {
        if (status === stores_1.RouteExecutionStatus.Idle) {
            const thresholdExceeded = (0, TokenValueBottomSheet_1.getTokenValueLossThreshold)(route);
            if (thresholdExceeded) {
                tokenValueBottomSheetRef.current?.open();
            }
            else {
                handleExecuteRoute();
            }
        }
        if (status === stores_1.RouteExecutionStatus.Failed) {
            restartRoute();
        }
    };
    const handleRemoveRoute = () => {
        navigateBack();
        deleteRoute();
    };
    const getSwapButtonText = () => {
        switch (status) {
            case stores_1.RouteExecutionStatus.Idle:
                return variant !== 'refuel'
                    ? t(`button.startSwap`)
                    : t(`button.startGasSwap`);
            case stores_1.RouteExecutionStatus.Failed:
                return t('button.tryAgain');
            default:
                return '';
        }
    };
    const SwapButton = insurance && status === stores_1.RouteExecutionStatus.Idle
        ? StartSwapButton_1.StartIdleSwapButton
        : StartSwapButton_1.StartSwapButton;
    const insuranceAvailable = insurance &&
        variant !== 'refuel' &&
        (route?.insurance?.state === 'INSURED' ||
            (status === stores_1.RouteExecutionStatus.Idle &&
                route?.insurance?.state === 'INSURABLE'));
    const insuranceCoverageId = route?.steps[0].execution?.process
        .filter((process) => process.type !== 'TOKEN_ALLOWANCE')
        .find((process) => process.txHash)?.txHash ?? route?.fromAddress;
    return ((0, jsx_runtime_1.jsxs)(SwapPage_style_1.Container, { children: [(0, Step_1.getStepList)(route), insuranceAvailable ? ((0, jsx_runtime_1.jsx)(Insurance_1.Insurance, { mt: 2, status: status, insurableRouteId: stateRouteId, feeAmountUsd: route?.insurance.feeAmountUsd, insuranceCoverageId: insuranceCoverageId, onChange: setRouteId })) : null, status === stores_1.RouteExecutionStatus.Idle ||
                status === stores_1.RouteExecutionStatus.Failed ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(GasMessage_1.GasMessage, { mt: 2, route: route }), (0, jsx_runtime_1.jsxs)(material_1.Box, { mt: 2, display: "flex", children: [(0, jsx_runtime_1.jsx)(SwapButton, { text: getSwapButtonText(), onClick: handleSwapClick, route: route, insurableRouteId: stateRouteId }), status === stores_1.RouteExecutionStatus.Failed ? ((0, jsx_runtime_1.jsx)(material_1.Tooltip, { title: t('button.removeSwap'), placement: "bottom-end", enterDelay: 400, arrow: true, children: (0, jsx_runtime_1.jsx)(material_1.Button, { onClick: handleRemoveRoute, sx: {
                                        minWidth: 48,
                                        marginLeft: 1,
                                    }, children: (0, jsx_runtime_1.jsx)(Delete_1.default, {}) }) })) : null] })] })) : null, route && status ? ((0, jsx_runtime_1.jsx)(StatusBottomSheet_1.StatusBottomSheet, { status: status, route: route })) : null, route ? ((0, jsx_runtime_1.jsx)(TokenValueBottomSheet_1.TokenValueBottomSheet, { route: route, ref: tokenValueBottomSheetRef, onContinue: handleExecuteRoute })) : null, route ? ((0, jsx_runtime_1.jsx)(ExchangeRateBottomSheet_1.ExchangeRateBottomSheet, { ref: exchangeRateBottomSheetRef })) : null] }));
};
exports.SwapPage = SwapPage;
