import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useRef } from 'react';
import { useController } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import { SwapFormKeyHelper, useWidgetConfig } from '../../providers';
import { DisabledUI } from '../../types';
import { formatAmount } from '../../utils';
import { Card, CardTitle } from '../Card';
import { FitInputText } from './FitInputText';
import { FormPriceHelperText } from './FormPriceHelperText';
import { FormControl, Input } from './SwapInput.style';
import { SwapInputEndAdornment } from './SwapInputEndAdornment';
import { SwapInputStartAdornment } from './SwapInputStartAdornment';
export const SwapInput = ({ formType, ...props }) => {
    const { t } = useTranslation();
    const amountKey = SwapFormKeyHelper.getAmountKey(formType);
    const { field: { onChange, onBlur, value }, } = useController({
        name: amountKey,
    });
    const { disabledUI } = useWidgetConfig();
    const ref = useRef(null);
    const handleChange = (event) => {
        const { value } = event.target;
        const formattedAmount = formatAmount(value, true);
        onChange(formattedAmount);
    };
    const handleBlur = (event) => {
        const { value } = event.target;
        const formattedAmount = formatAmount(value);
        onChange(formattedAmount);
        onBlur();
    };
    const disabled = disabledUI?.includes(DisabledUI.FromAmount);
    return (_jsxs(Card, { ...props, children: [_jsx(CardTitle, { children: t('swap.fromAmount') }), _jsxs(FormControl, { fullWidth: true, children: [_jsx(Input, { inputRef: ref, size: "small", autoComplete: "off", placeholder: "0", startAdornment: _jsx(SwapInputStartAdornment, { formType: formType }), endAdornment: !disabled ? (_jsx(SwapInputEndAdornment, { formType: formType })) : undefined, inputProps: {
                            inputMode: 'decimal',
                        }, onChange: handleChange, onBlur: handleBlur, value: value, name: amountKey, disabled: disabled, required: true }), _jsx(FormPriceHelperText, { formType: formType })] }), _jsx(FitInputText, { ref: ref, formType: formType })] }));
};
