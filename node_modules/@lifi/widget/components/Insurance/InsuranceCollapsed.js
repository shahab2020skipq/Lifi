import { jsx as _jsx } from "react/jsx-runtime";
import { Collapse } from '@mui/material';
import { useState } from 'react';
import { useSwapRoutes } from '../../hooks';
import { RouteExecutionStatus, useRouteExecutionStore, useSetExecutableRoute, } from '../../stores';
import { InsuranceCard } from './InsuranceCard';
export const InsuranceCollapsed = ({ status, insurableRouteId, insuranceCoverageId, feeAmountUsd, onChange, ...props }) => {
    const [insuredRoute, setInsuredRoute] = useState();
    const setExecutableRoute = useSetExecutableRoute();
    const routeExecution = useRouteExecutionStore((state) => state.routes[insurableRouteId]);
    useSwapRoutes({
        insurableRoute: routeExecution?.route,
        onSettled(data) {
            if (data?.routes?.[0]) {
                setInsuredRoute(data.routes[0]);
            }
        },
    });
    const toggleInsurance = (_, checked) => {
        if (insuredRoute) {
            if (checked) {
                setExecutableRoute(insuredRoute, insurableRouteId);
            }
            onChange?.(checked ? insuredRoute.id : insurableRouteId);
        }
    };
    return (_jsx(Collapse, { timeout: 225, in: insuredRoute?.insurance?.state === 'INSURED', unmountOnExit: true, mountOnEnter: true, appear: status === RouteExecutionStatus.Idle, children: _jsx(InsuranceCard, { feeAmountUsd: feeAmountUsd, status: status, insuranceCoverageId: insuranceCoverageId, onChange: toggleInsurance, ...props }) }));
};
