"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiFiWalletManagement = void 0;
const events_1 = require("events");
const walletPersistance_1 = require("./walletPersistance");
class LiFiWalletManagement extends events_1.default.EventEmitter {
    constructor() {
        super(...arguments);
        this.connectedWallets = [];
        this.connect = async (wallet) => {
            try {
                await wallet.connect();
                wallet.addListener('walletAccountChanged', this.handleAccountDataChange);
                this.connectedWallets.unshift(wallet);
                (0, walletPersistance_1.removeFromDeactivatedWallets)({
                    address: wallet.account?.address || '',
                    name: wallet.name,
                });
                (0, walletPersistance_1.addToActiveWallets)({
                    address: wallet.account?.address || '',
                    name: wallet.name,
                });
            }
            catch (e) {
                throw e;
            }
        };
        this.disconnect = async (wallet) => {
            wallet.removeAllListeners();
            (0, walletPersistance_1.removeFromActiveWallets)({
                address: wallet.account?.address || '',
                name: wallet.name,
            });
            (0, walletPersistance_1.addToDeactivatedWallets)({
                address: wallet.account?.address || '',
                name: wallet.name,
            });
            wallet.disconnect();
        };
    }
    async autoConnect(wallets) {
        for (const wallet of wallets) {
            if (wallet.autoConnect) {
                await wallet.autoConnect();
                wallet.addListener('walletAccountChanged', this.handleAccountDataChange);
                this.connectedWallets.unshift(wallet);
            }
        }
    }
    handleAccountDataChange() {
        this.emit('walletChanged', this.connectedWallets);
    }
}
exports.LiFiWalletManagement = LiFiWalletManagement;
