"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectedConnector = void 0;
const ethers_1 = require("ethers");
const events_1 = require("events");
const walletAutomation_1 = require("../walletAutomation");
const walletPersistance_1 = require("../walletPersistance");
class InjectedConnector extends events_1.default.EventEmitter {
    constructor(constructorArgs, windowConnector = window.ethereum, autoConnect = false) {
        super();
        this.isActivationInProgress = false;
        this.initializeProvider(windowConnector);
        this.name = constructorArgs.name;
        this.icon = constructorArgs.icon;
        this.installed = constructorArgs.installed;
    }
    initializeProvider(connectorWindowProperty) {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        this.windowProvider = connectorWindowProperty;
        this.windowProvider?.on('connect', async ({ chainId }) => {
            await this.calcAccountData();
        });
        this.windowProvider?.on('disconnect', async (error) => {
            await this.calcAccountData();
        });
        this.windowProvider?.on('chainChanged', async (chainId) => {
            await this.calcAccountData();
        });
        this.windowProvider?.on('accountsChanged', async (accounts) => {
            if (!accounts.length) {
                this.account = undefined;
                this.emit('walletAccountChanged', this);
                return;
            }
            await this.calcAccountData();
        });
    }
    async autoConnect() {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        if (this.isActivationInProgress) {
            return;
        }
        try {
            const selectedAddress = this.windowProvider.selectedAddress;
            if (!(0, walletPersistance_1.isWalletDeactivated)({
                address: selectedAddress || '',
                name: this.name,
            })) {
                await this.calcAccountData();
            }
        }
        catch (e) {
            throw e;
        }
    }
    async connect() {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        if (this.isActivationInProgress) {
            return;
        }
        this.isActivationInProgress = true;
        try {
            await this.windowProvider?.request({
                method: 'eth_requestAccounts',
            });
            await this.calcAccountData();
        }
        catch (error) {
            this.isActivationInProgress = false;
            throw error;
        }
        this.isActivationInProgress = false;
    }
    disconnect() {
        this.account = undefined;
        this.isActivationInProgress = false;
    }
    async switchChain(chainId) {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        return (0, walletAutomation_1.switchChain)(this.windowProvider, chainId);
    }
    async addChain(chainId) {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        return (0, walletAutomation_1.addChain)(this.windowProvider, chainId);
    }
    async addToken(chainId, token) {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        return (0, walletAutomation_1.switchChainAndAddToken)(this.windowProvider, chainId, token);
    }
    async calcAccountData() {
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        const provider = new ethers_1.ethers.providers.Web3Provider(this.windowProvider, 'any');
        const signer = provider.getSigner();
        this.account = {
            chainId: await signer.getChainId(),
            address: await signer.getAddress(),
            signer,
            provider,
        };
        this.emit('walletAccountChanged', this);
    }
}
exports.InjectedConnector = InjectedConnector;
