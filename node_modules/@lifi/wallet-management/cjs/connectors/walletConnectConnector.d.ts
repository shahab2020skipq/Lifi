/// <reference types="node" />
import type { Token } from '@lifi/sdk';
import WalletConnectProvider from '@walletconnect/ethereum-provider';
import events from 'events';
import type { EventEmitter } from 'node:events';
import type { AccountData, Wallet, WalletConnectConnectorConstructorArgs } from '../types';
interface MockWalletConnectProvider extends Omit<WalletConnectProvider, 'on' | 'off' | 'once' | 'removeListener'>, EventEmitter {
}
export declare class WalletConnectConnector extends events.EventEmitter implements Wallet {
    private readonly options?;
    provider: MockWalletConnectProvider | undefined;
    walletConnectProvider: WalletConnectProvider | undefined;
    isActivationInProgress: boolean;
    account: AccountData | undefined;
    name: string;
    icon: string;
    installed: () => boolean;
    constructor(constructorArgs: WalletConnectConnectorConstructorArgs);
    private startListening;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    switchChain(chainId: number): Promise<boolean>;
    addChain(chainId: number): Promise<boolean>;
    addToken(chainId: number, token: Token): Promise<boolean>;
    private calcAccountData;
}
export {};
