import { ethers } from 'ethers';
import events from 'events';
import { addChain, switchChain, switchChainAndAddToken, } from '../walletAutomation';
import { isWalletDeactivated } from '../walletPersistance';
export class InjectedConnector extends events.EventEmitter {
    constructor(constructorArgs, windowConnector = window.ethereum, autoConnect = false) {
        super();
        this.isActivationInProgress = false;
        this.initializeProvider(windowConnector);
        this.name = constructorArgs.name;
        this.icon = constructorArgs.icon;
        this.installed = constructorArgs.installed;
    }
    initializeProvider(connectorWindowProperty) {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        this.windowProvider = connectorWindowProperty;
        this.windowProvider?.on('connect', async ({ chainId }) => {
            await this.calcAccountData();
        });
        this.windowProvider?.on('disconnect', async (error) => {
            await this.calcAccountData();
        });
        this.windowProvider?.on('chainChanged', async (chainId) => {
            await this.calcAccountData();
        });
        this.windowProvider?.on('accountsChanged', async (accounts) => {
            if (!accounts.length) {
                this.account = undefined;
                this.emit('walletAccountChanged', this);
                return;
            }
            await this.calcAccountData();
        });
    }
    async autoConnect() {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        if (this.isActivationInProgress) {
            return;
        }
        try {
            const selectedAddress = this.windowProvider.selectedAddress;
            if (!isWalletDeactivated({
                address: selectedAddress || '',
                name: this.name,
            })) {
                await this.calcAccountData();
            }
        }
        catch (e) {
            throw e;
        }
    }
    async connect() {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        if (this.isActivationInProgress) {
            return;
        }
        this.isActivationInProgress = true;
        try {
            await this.windowProvider?.request({
                method: 'eth_requestAccounts',
            });
            await this.calcAccountData();
        }
        catch (error) {
            this.isActivationInProgress = false;
            throw error;
        }
        this.isActivationInProgress = false;
    }
    disconnect() {
        this.account = undefined;
        this.isActivationInProgress = false;
    }
    async switchChain(chainId) {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        return switchChain(this.windowProvider, chainId);
    }
    async addChain(chainId) {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        return addChain(this.windowProvider, chainId);
    }
    async addToken(chainId, token) {
        if (window === undefined) {
            throw new Error('window is not defined. This should not have happened.');
        }
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        return switchChainAndAddToken(this.windowProvider, chainId, token);
    }
    async calcAccountData() {
        if (!this.windowProvider) {
            throw new Error('provider is not defined.');
        }
        const provider = new ethers.providers.Web3Provider(this.windowProvider, 'any');
        const signer = provider.getSigner();
        this.account = {
            chainId: await signer.getChainId(),
            address: await signer.getAddress(),
            signer,
            provider,
        };
        this.emit('walletAccountChanged', this);
    }
}
