import { supportedChains } from '@lifi/sdk';
import { InjectedConnector } from './connectors/injectedConnector';
import { WalletConnectConnector } from './connectors/walletConnectConnector';
import { ProviderIdentityFlag } from './types';
import { walletIcons } from './walletIcons';
const defaultWallet = new InjectedConnector({
    // unknown Default wallet that injects as metamask but is not metamask
    name: 'Default Wallet',
    installed: () => !!window.ethereum &&
        !window?.ethereum?.[ProviderIdentityFlag.MetaMask],
    icon: walletIcons.placeholder,
});
const metamask = new InjectedConnector({
    name: 'MetaMask',
    installed: () => !!window?.ethereum?.[ProviderIdentityFlag.MetaMask],
    icon: walletIcons.metamask,
});
const walletConnect = new WalletConnectConnector({
    name: 'Wallet Connect',
    installed: () => true,
    icon: walletIcons.walletConnect,
    rpc: Object.fromEntries(supportedChains.map((chain) => {
        return [chain.id, chain.metamask.rpcUrls[0] || ''];
    })),
});
const frontier = new InjectedConnector({
    name: 'Frontier',
    installed: () => window.frontier,
    icon: walletIcons.frontier,
}, window.frontier?.ethereum);
const brave = new InjectedConnector({
    name: 'Brave',
    installed: () => 
    // eslint-disable-next-line no-underscore-dangle
    navigator.brave && window._web3Ref,
    icon: walletIcons.brave,
});
const mathWallet = new InjectedConnector({
    name: 'MathWallet',
    installed: () => window.ethereum?.[ProviderIdentityFlag.MathWallet],
    icon: walletIcons.mathwallet,
});
const tallyho = new InjectedConnector({
    name: 'Taho',
    installed: () => window.tally &&
        window.tally?.[ProviderIdentityFlag.TallyHo],
    icon: walletIcons.tallyho,
}, window.tally);
const blockWallet = new InjectedConnector({
    name: 'BlockWallet',
    installed: () => window.ethereum?.[ProviderIdentityFlag.BlockWallet],
    icon: walletIcons.blockwallet,
});
const binance = new InjectedConnector({
    name: 'Binance',
    installed: () => window.BinanceChain,
    icon: walletIcons.binance,
}, window.BinanceChain);
const coinbase = new InjectedConnector({
    name: 'Coinbase',
    installed: () => window.coinbaseWalletExtension,
    icon: walletIcons.coinbase,
}, window.coinbaseWalletExtension);
const trust = new InjectedConnector({
    name: 'Trust',
    installed: () => window.trustWallet,
    icon: walletIcons.trust,
}, window.trustWallet);
const status = new InjectedConnector({
    name: 'Status',
    installed: () => window.ethereum?.[ProviderIdentityFlag.Status],
    icon: walletIcons.status,
});
const alphawallet = new InjectedConnector({
    name: 'AlphaWallet',
    installed: () => window.ethereum?.[ProviderIdentityFlag.AlphaWallet],
    icon: walletIcons.alphawallet,
});
const atoken = new InjectedConnector({
    name: 'AToken',
    installed: () => window.ethereum?.[ProviderIdentityFlag.AToken],
    icon: walletIcons.atoken,
});
const apex = new InjectedConnector({
    name: 'Apex Wallet',
    installed: () => window.ethereum?.[ProviderIdentityFlag.ApexWallet],
    icon: walletIcons.placeholder,
});
const bitpie = new InjectedConnector({
    name: 'Bitpie',
    installed: () => window.ethereum?.Bitpie,
    icon: walletIcons.bitpie,
});
const dcent = new InjectedConnector({
    name: 'Dcent',
    installed: () => window.ethereum?.[ProviderIdentityFlag.Dcent],
    icon: walletIcons.dcent,
});
const frame = new InjectedConnector({
    name: 'Frame',
    installed: () => window.frame,
    icon: walletIcons.frame,
}, window.frame);
const huobiwallet = new InjectedConnector({
    name: 'HuobiWallet',
    installed: () => window.ethereum?.[ProviderIdentityFlag.HuobiWallet],
    icon: walletIcons.huobiwallet,
});
const hyperpay = new InjectedConnector({
    name: 'HyperPay',
    // Note: The property `hiWallet` is as of now the only known way of identifying hyperpay
    // wallet as it is a direct clone of metamask. `checkProviderIdentity` implementation is subject to
    // future changes
    installed: () => window.ethereum?.hiWallet,
    icon: walletIcons.hyperpay,
});
const imtoken = new InjectedConnector({
    name: 'ImToken',
    installed: () => window.ethereum?.[ProviderIdentityFlag.ImToken],
    icon: walletIcons.imtoken,
});
const liquality = new InjectedConnector({
    name: 'Liquality',
    installed: () => window.liquality,
    icon: walletIcons.liquality,
}, window.liquality);
const meetone = new InjectedConnector({
    name: 'MeetOne',
    installed: () => window.ethereum?.[ProviderIdentityFlag.MeetOne] === 'MEETONE',
    icon: walletIcons.meetone,
});
const mykey = new InjectedConnector({
    name: 'MyKey',
    installed: () => window.ethereum?.[ProviderIdentityFlag.MyKey],
    icon: walletIcons.mykey,
});
const ownbit = new InjectedConnector({
    name: 'OwnBit',
    installed: () => window.ethereum?.[ProviderIdentityFlag.OwnBit],
    icon: walletIcons.ownbit,
});
const tokenpocket = new InjectedConnector({
    name: 'TokenPocket',
    installed: () => window.ethereum?.[ProviderIdentityFlag.TokenPocket] &&
        !window.ethereum?.[ProviderIdentityFlag.TP],
    icon: walletIcons.tokenpocket,
});
const xdefi = new InjectedConnector({
    name: 'XDEFI',
    // eslint-disable-next-line dot-notation
    installed: () => window.ethereum?.[ProviderIdentityFlag.XDEFI],
    icon: walletIcons.xdefi,
});
const oneInch = new InjectedConnector({
    name: 'OneInch',
    installed: () => window.ethereum?.[ProviderIdentityFlag.OneInch],
    icon: walletIcons.oneInch,
});
const tokenary = new InjectedConnector({
    name: 'Tokenary',
    installed: () => window.ethereum?.[ProviderIdentityFlag.Tokenary],
    icon: walletIcons.tokenary,
});
export const supportedWallets = [
    defaultWallet,
    metamask,
    walletConnect,
    tallyho,
    binance,
    frontier,
    coinbase,
    trust,
    status,
    alphawallet,
    atoken,
    blockWallet,
    bitpie,
    brave,
    apex,
    dcent,
    frame,
    huobiwallet,
    hyperpay,
    imtoken,
    liquality,
    meetone,
    mykey,
    ownbit,
    tokenpocket,
    xdefi,
    oneInch,
    tokenary,
    mathWallet,
];
